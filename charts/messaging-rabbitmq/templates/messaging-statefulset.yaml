{{- $storageClassName := pluck "storageClassName" .Values.global.persistence .Values.persistence | compact | first }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: messaging-statefulset
  labels:
    {{- include "messaging-rabbitmq.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "messaging-rabbitmq.selectorLabels" . | nindent 6 }}
  # headless service that gives network identity to the RMQ nodes, and enables them to cluster
  serviceName: messaging-service-headless
  template:
    metadata:
      labels:
        {{- include "messaging-rabbitmq.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- include "messaging-rabbitmq.imagePullSecrets" . | indent 6 }}
      {{- if .Values.podSecurityContext }}
      securityContext: {{- .Values.podSecurityContext | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "messaging-rabbitmq.serviceAccountName" . }}
      initContainers:
        # Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
        # the file must be mounted as read-write. We use init containers to copy from the config map read-only
        # path, to a read-write path
        - name: rabbitmq-config
          image: busybox:1.32.0
          volumeMounts:
            - name: configuration
              mountPath: /tmp/rabbitmq
            - name: rabbitmq-config-rw
              mountPath: /etc/rabbitmq
          command:
            - sh
            - -c
            # the newline is needed since the Docker image entrypoint scripts appends to the config file
            - cp /tmp/rabbitmq/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf && echo '' >> /etc/rabbitmq/rabbitmq.conf;
              cp /tmp/rabbitmq/enabled_plugins /etc/rabbitmq/enabled_plugins
      containers:
        - name: rabbitmq
          image: {{ include "messaging-rabbitmq.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: messaging-secret
                  key: pass
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: messaging-secret
                  key: user
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: messaging-secret
                  key: cookie
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "messaging-service-headless"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_IP)"
          ports:
            - name: amqp
              containerPort: {{ .Values.service.client.amqp.port }}
              protocol: "TCP"
            - name: management
              containerPort: {{ .Values.service.client.http.port }}
              protocol: "TCP"
            - name: epmd
              containerPort: {{ .Values.service.headless.epmd.port }}
              protocol: "TCP"
          {{- if .Values.image.securityContext }}
          securityContext: {{- .Values.image.securityContext | toYaml | nindent 12 }}
          {{- end }}
          livenessProbe:
            exec:
              command: [ "rabbitmq-diagnostics", "status" ]
            initialDelaySeconds: 60
            # See https://www.rabbitmq.com/monitoring.html for monitoring frequency recommendations.
            periodSeconds: 60
            timeoutSeconds: 15
          readinessProbe: # probe to know when RMQ is ready to accept traffic
            exec:
              command: [ "rabbitmq-diagnostics", "ping" ]
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 10
          volumeMounts:
            - name: rabbitmq-config-rw
              mountPath: "/etc/rabbitmq"
              # mountPath: "/etc/rabbitmq/conf.d/"
            # mounting rabbitmq.conf and enabled_plugins
            # - name: configuration
            #   mountPath: "/etc/rabbitmq"
            #   # mountPath: "/etc/rabbitmq/conf.d/"
            # rabbitmq data directory
            - name: data
              mountPath: "/var/lib/rabbitmq/mnesia"
      volumes:
        - name: configuration
          configMap:
            name: messaging-configmap
            optional: false
            items:
              - key: rabbitmq.conf
                path: "rabbitmq.conf"
              - key: enabled_plugins
                path: "enabled_plugins"
        - name: rabbitmq-config-rw
          emptyDir: { }
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
            {{- end }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "messaging-rabbitmq.labels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations: {{- .Values.persistence.annotations | toYaml | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if $storageClassName }}
        storageClassName: {{ $storageClassName }}
        {{- end }}
        {{- if .Values.persistence.selector }}
        selector: {{- .Values.persistence.selector | toYaml | nindent 10 }}
        {{- end -}}
  {{- end }}

