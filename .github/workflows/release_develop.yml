name: Release develop Charts
on:
  pull_request:
    branches: [develop]
    types: [closed]
  workflow_dispatch:

jobs:
  check:
    # we want to trigger this workflow only if:
    # - the PR is merged
    # - it does not contain the skip-workflow label
    # - the target branch is develop
    if: ${{ (!contains(github.event.pull_request.labels.*.name, 'skip-workflow')) && (github.event.pull_request.merged) && (github.event.pull_request.base.ref == 'develop') }}
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.4.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch develop --since HEAD^1)
          echo "${changed}"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> $GITHUB_ENV

            # multiline string
            echo "changed_charts<<EOF" >> $GITHUB_ENV
            echo "$changed" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Check if chart version is develop
        if: env.changed == 'true'
        env:
          changed_charts: ${{ env.changed_charts }}
        run: |
          #echo "${changed}"
          #echo "${changed_charts}"
          for CHART in $changed_charts
          do
            echo "Checking chart $CHART for develop version"
            version=$(yq ".version" < ${CHART}/Chart.yaml)
            if [[ $version != *-develop ]]; then
              echo "Chart $CHART changed, but not intended for develop" 
              exit 1
            fi
          done

      - name: Run chart-testing (lint)
        run: ct lint --target-branch develop --since HEAD^1 --check-version-increment=false

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.0.0'

      - name: Push develop charts
        if: env.changed == 'true'
        env:
          changed_charts: ${{ env.changed_charts }}
          HELM_OCI_REGISTRY: ${{ secrets.HELM_OCI_REGISTRY }}
          HELM_OCI_REPOSITORY: ${{ secrets.HELM_OCI_REPOSITORY }}
          HELM_USERNAME: ${{ secrets.HELM_USERNAME }}
          HELM_PASSWORD: ${{ secrets.HELM_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
        run: |
          echo "Logging in to $HELM_OCI_REGISTRY"
          helm registry login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          cosign login $HELM_OCI_REGISTRY --username $HELM_USERNAME --password $HELM_PASSWORD
          
          release_chart(){
            CHART=$1
            
            name=$(yq ".name" < ${CHART}/Chart.yaml)
            version=$(yq ".version" < ${CHART}/Chart.yaml)
          
            echo "Releasing chart $CHART with version $version"
          
            helm dependency update $CHART
            helm package $CHART
            pushed=$(helm push $name-$version.tgz oci://$HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY)
          
            digest=$(echo "$pushed" | awk 'FNR == 2 {print $2}')
          
            cosign sign --yes --key env://COSIGN_PRIVATE_KEY $HELM_OCI_REGISTRY/$HELM_OCI_REPOSITORY/$name@$digest
          
            echo "Chart $name-$version pushed"
          }
          
          # we need to release the charts in the correct order because of dependencies
          # first is the library chart
          
          # check if the library chart has changed
          if [[ $changed_charts == *"charts/czertainly-lib"* ]]; then
            echo "charts/czertainly-lib has changed, releasing it first"
            release_chart charts/czertainly-lib
            # remove the library chart from the list of changed charts
            changed_charts=$(echo $changed_charts | sed s:charts/czertainly-lib::)
          fi
          
          umbrella_changed=false
          # czertainly umbrella chart must be released as last one
          if [[ $changed_charts == *"charts/czertainly"* ]]; then
            echo "charts/czertainly has changed, mark to released it as last"
            umbrella_changed=true
            # remove the umbrella chart from the list of changed charts
            changed_charts=$(echo $changed_charts | sed s:charts/czertainly::)
          fi
          
          # release all other charts, there should not be any dependency conflict
          for CHART in $changed_charts
          do
            echo "Releasing $CHART"
            release_chart $CHART
          done
          
          # when the umbrella chart has changed, release it as last one
          if [[ $umbrella_changed == "true" ]]; then
            echo "Releasing charts/czertainly"
            release_chart charts/czertainly
          fi
          
          echo "Logging out from $HELM_OCI_REGISTRY"
          helm registry logout $HELM_OCI_REGISTRY

      #- name: Create kind cluster
      #  uses: helm/kind-action@v1.4.0
      #  if: steps.list-changed.outputs.changed == 'true'

      #- name: Run chart-testing (install)
      #  run: ct install
